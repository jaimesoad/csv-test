// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"sqlc/pkg/utils"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT username, identifier, one_time_password, recovery_code, first_name, last_name, department, location, created FROM Users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Identifier,
			&i.OneTimePassword,
			&i.RecoveryCode,
			&i.FirstName,
			&i.LastName,
			&i.Department,
			&i.Location,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newUser = `-- name: NewUser :exec
INSERT INTO Users (
    Username,
    Identifier,
    One_time_password,
    Recovery_code,
    First_name,
    Last_name,
    Department,
    Location,
    Created
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type NewUserParams struct {
	Username        string `csv:"Username"`
	Identifier      int64  `csv:" Identifier"`
	OneTimePassword string `csv:"One-time password"`
	RecoveryCode    string `csv:"Recovery code"`
	FirstName       string `csv:"First name"`
	LastName        string `csv:"Last name"`
	Department      string `csv:"Department"`
	Location        string `csv:"Location"`
	Created         utils.Time
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.db.ExecContext(ctx, newUser,
		arg.Username,
		arg.Identifier,
		arg.OneTimePassword,
		arg.RecoveryCode,
		arg.FirstName,
		arg.LastName,
		arg.Department,
		arg.Location,
		arg.Created,
	)
	return err
}
